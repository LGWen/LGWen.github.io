{"meta":{"title":"小妹要去哪~","subtitle":null,"description":null,"author":"Tokas","url":"https://lgwen.github.io"},"pages":[],"posts":[{"title":"手把手教你部署NUXT项目","slug":"nuxt-deploy","date":"2018-07-17T07:32:18.425Z","updated":"2018-07-17T11:45:17.732Z","comments":true,"path":"2018/07/17/nuxt-deploy/","link":"","permalink":"https://lgwen.github.io/2018/07/17/nuxt-deploy/","excerpt":"下载好脚手架后我们在开发模式下直接使用 npm run dev即可观看、调试我们的项目页面。 项目完毕就准备部署预发布走测试流程。 nuxt的部署可以分为两种,一种是静态应用（站点）部署，一种动态应用部署（服务端渲染应用部署）。可以参考这里","text":"下载好脚手架后我们在开发模式下直接使用 npm run dev即可观看、调试我们的项目页面。 项目完毕就准备部署预发布走测试流程。 nuxt的部署可以分为两种,一种是静态应用（站点）部署，一种动态应用部署（服务端渲染应用部署）。可以参考这里 静态应用部署静态部署没什么好说的，和hexo一样，写好了内容，执行一下nuxt generate然后把根目录下生成的dist文件丢在服务器下即可。 可利用下面的命令生成应用的静态目录和文件：1npm run generate 这个命令会创建一个 dist 文件夹，所有静态化后的资源文件均在其中。 服务端渲染应用（动态）部署部署 Nuxt.js 服务端渲染的应用不能直接使用 nuxt 命令，而应该先进行编译构建，然后再启动 Nuxt 服务，可通过以下两个命令来完成： 12nuxt buildnuxt start 但是这个命令不能再远端使用,所以我们一般把这个命令放在package.json里通过npm进行执行。 推荐的 package.json 配置如下： 1234567891011&#123; \"name\": \"my-app\", \"dependencies\": &#123; \"nuxt\": \"latest\" &#125;, \"scripts\": &#123; \"dev\": \"nuxt\", \"build\": \"nuxt build\", \"start\": \"nuxt start\" &#125;&#125; 呐，官方的介绍就这么多，很简单吧，很容易吧。 但是你发现，这样起的服务，使用的是你本地的ip和端口。也就是你在本地开发的时候使用什么端口，这里启动的就是什么端口。我们需要的是，在本地启动的时候，使用本地ip和端口。在生产环境启动的时候就是用环境的ip和端口那么我们就需要到server/index.js这里改一下 123const host = process.env.HOST || '0.0.0.0'const port = process.env.PORT || 8090 好了，这样你启动的项目就是你环境的ip端口了。 但是，当你关闭远端的窗口后你会发现你的项目被kill了。就像你在本地开发的时候一样，使用npm run dev启动服务后，按一下Ctrl + C项目就会被kill。 所以我们需要一个守护我们这个进程的东西，就算我离开了远端或者本地开发的时候不小心在控制台按下Ctrl + C，项目还是能正常。 上网查了一下守护进程的工具有很多，因为公司使用的是pm2，使用我这里就只针对pm2进行部署。还是简单的举例一下pm2的优势吧！ 1、内建负载均衡（使用Node cluster 集群模块）2、守护进程，后台运行。3、0秒停机重载，我理解大概意思是维护升级的时候不需要停机.4、具有Ubuntu和CentOS 的启动脚本5、停止不稳定的进程（避免无限循环）6、控制台检测7、提供 HTTP API8、远程控制和实时的接口API ( Nodejs 模块,允许和PM2进程管理器交互 )9、简洁明了的可视化窗口和调试信息。 上面都是网上找的优点，在使用过程中我只有明显使用到1、2、3、6、9这几个而已。 1、负载均衡。你完全可以使用Node cluster建立自己的子线程，同时开启多个进程来监听同一个端口，分发http请求处理。但是都有pm2帮你做了你何必又自己做呢？所以对于node的Node cluster作为了解即可啦。 2、守护进程，上面已经说了离开了远端项目还是能正常使用。我们一般启动的时候，pm2会默认根据机器具有几核，智能的给你开启多核。除非你自己手动限制开启。pm2 start xxx.js -i 就能启动你需要的server服务，然后-i 指定多开数量,默认为自动根据机器配置开启。 3、0秒停机重载。这个是不是和负载均衡有点异曲同工？ pm2配置生成脚本就像webpack的webpack.config.js和npm包管理的package.json一样。pm2的配置脚本也是需要的，我们可以在终端pm2 ecosystem 会在工程下面生成一个ecosystem.config.js。（当然你可以手动新建一个该文件） 修改脚本根据项目简简单单的编写一下脚本123456789101112131415161718&#123; \"apps\": [&#123; \"name\": \"my-app\", \"max_memory_restart\": \"300M\", \"script\": \"./build/main.js\", \"out_file\": \"/home/efun/logs/my-app-logs/my-app-out.log\", \"error_file\": \"/home/efun/logs/my-app-logs/my-app-error.log\", \"merge_logs\": true, \"instances\": 2, \"exec_mode\": \"cluster\", \"env\": &#123; \"NODE_ENV\": \"development\" &#125;, \"env_production\": &#123; \"NODE_ENV\": \"production\" &#125; &#125;]&#125; 当然，你要是想进行更为复杂的操作你可以企业看官网;呐，地址都给你了 配置好了脚本怎么使用？ 如果你不需要使用npm命令启动，你完全可以使用pm2的命令启动。后面跟你项目的入口js文件。pm2 start xxx.js 使用脚本启动项目当然，启动nuxt（说白了,使用node作为前端服务器，都应该使用这种启动方法），结合package.json的script脚本进行操作。 下面是package.json可以作为参考 12345678910111213\"scripts\": &#123; \"dev\": \"backpack dev\", \"build\": \"nuxt build &amp;&amp; backpack build\", \"start\": \"cross-env NODE_ENV=production node build/main.js\", \"precommit\": \"npm run lint\", \"lint\": \"eslint --ext .js,.vue --ignore-path .gitignore .\", \"prod\": \"PORT=34004 pm2 start ecosystem.json --env production\", \"pre-prod\": \"PORT=34104 pm2 start ecosystem-test.json --env production\", \"pre-restart\": \"pm2 restart my-app\", \"prod-restart\": \"pm2 restart my-app\", \"pre-stop\": \"pm2 delete my-app\", \"prod-stop\": \"pm2 delete my-app\" &#125;, 启动预发布环境就执行 npm run pre-prod启动项目，执行的是ecosystem-test.json，通过PORT把端口传过去进行区分预发布和正式环境。启动预正式环境就执行 npm run prod启动项目，执行的是ecosystem.json。 查看程序运行：[efun@Nodejskr75 pf-kr-pre]$ pm2 list 停用运行的程序pm2 stop my-app [efun@Nodejskr75 pf-kr-pre]$ pm2 stop my-app[PM2] Applying action stopProcessId on app my-app[PM2] pf-kq-pre ✓[PM2] pf-kq-pre ✓ 停用后想重启程序，可以使用pm2命令reload。 pm2 reload my-app也可以使用npm命令 npm run pre-restart (实际上还是执行pm2 reload my-app) stop并不能清理程序，也不会释放端口，而是要delete： [azuo1228@Server Meanjs-MMM]$ pm2 delete my-app[PM2] Applying action deleteProcessId on app all[PM2] server ✓[PM2] server ✓ Use pm2 show &lt;id|name&gt; to get more details about an app 好咯，说了一堆pm2。下面说说使用pm2部署遇到的几个坑点。 #坑一：部署到线上，需要执行npm run build编译成静态文件（同时压缩js、css等） 。 或者按照文档说的执行 nuxt build,这样项目才读取的才是硬盘里的文件。这一点和使用vue-cli脚手架部署一样。 有次就是忘记执行了，导致访问页面路由一直在loading，但是就是不出来内容，或者出来个502.这里最好就一起写在npm命令的脚本里，以免下次又漏了。 因为公司是使用jenkins进行自动化部署，所以我这个build是放在jenkins进行操作的。 所以在提交git后，使用compile命令进行编译，rsync进行同步，restart进行重启，stop进行停用，start进行启动。 因为并不是所有公司都使用jenkins发布，所以这里就不多说。不过jenkins真的好处多多，好用又方便。 #坑二： 一个域名被解析到一个静态服务器，上面有很多静态html等各种资源(域名根目录未被使用)。后来需要加一个平台上去，同时这个平台使用该域名(根目录映射平台首页)。 这个时候，就需要运维同事的配合了。在处理前端访问url的时候，先经过Nginx的应用层，然后Nginx先判断改url是否带有静态资源特征，也就是.js .css .jpg .png ….。根据不同的资源路径或者路由进行分发指向node服务器还是原有的静态服务器。 这里上个Nginx的过滤规则： 1234location ~* ^.+.(jpg|jpeg|gif|css|png|js|ico|txt|srt|swf)$ &#123; root /var/www/mywebsite/site/; expires 30d;&#125; 现在nuxt部署后。 首页路由为：www.mywebsite.com ,页面依赖的其中一个js路径为https://www.mywebsite.com/_nuxt/manifest.e6cf8cf6462faca1a03e.js 这个时候，页面上所有的js引用都是404 原因是因为运维同事的过滤规则导致页面读取js静态资源，跑到静态服务器上面找去了。当然找不到。因为这个js文件我们部署build的时候，是在node服务器上的。 这个时候需要在Nginx的过滤规则上加多权重更高的一个过滤。123location ~^/_nuxt/ &#123; alias /mywebsite/.nuxt/dist/;&#125; 上面是Nginx具有中间应用层的情况下的规则。那如果不需要应用层Nginx规则则为如下： location /_nuxt/ { alias /var/www/mywebsite/.nuxt/dist/; } location ~* ^.+.(jpg|jpeg|gif|css|png|js|ico|txt|srt|swf|woff|woff2)$ { rewrite ^/_nuxt(/.*) $1 break; root /var/www/mywebsite/.nuxt/dist; expires 30d; } 这个在nuxt的issue地址有这个提问 暂时说这么多，下次想到有补充再补充一下。 下一篇应该就是整理webpack的单页面和多页面的配置了。","categories":[],"tags":[]},{"title":"Vue中响应式检测数组、对象的属性变化（增加或者删除）","slug":"vue-watch-objeck","date":"2018-07-17T07:28:18.606Z","updated":"2018-07-17T07:31:36.101Z","comments":true,"path":"2018/07/17/vue-watch-objeck/","link":"","permalink":"https://lgwen.github.io/2018/07/17/vue-watch-objeck/","excerpt":"Vue的官方文档说到： Vue 最独特的特性之一，是其非侵入性的响应式系统。 数据模型data仅仅是普通的 JavaScript 对象。而当你修改它们时，视图会进行更新。 但是有时候发现修改了model层数据模型data的时候，view视图层却不能及时、有效的得到更新。往往这类的问题出现都是因为动态操作了数组或者对象字面量的属性导致。 这里会有几种情况例子，但是其实都是同一个问题。","text":"Vue的官方文档说到： Vue 最独特的特性之一，是其非侵入性的响应式系统。 数据模型data仅仅是普通的 JavaScript 对象。而当你修改它们时，视图会进行更新。 但是有时候发现修改了model层数据模型data的时候，view视图层却不能及时、有效的得到更新。往往这类的问题出现都是因为动态操作了数组或者对象字面量的属性导致。 这里会有几种情况例子，但是其实都是同一个问题。 问题一 ： Vue并不能检测已经创建的实例上动态添加新的根级响应式属性所谓的根级就是data下。 12345678910var vm = new Vue(&#123; data:&#123; a:1 &#125;&#125;)// `vm.a` 是响应的vm.b = 2// `vm.b` 是非响应的 官方的解释是：受现代 JavaScript 的限制 (以及废弃 Object.observe)。由于 Vue 会在初始化实例时对属性执行 getter/setter 转化过程，所以属性必须在 data 对象上存在才能让 Vue 转换它，这样才能让它是响应的 二 ： Vue并不能检测到已对象属性中属性的添加或者删除在我们处理业务逻辑的时候，给data选项里的一个空数组或者空对象增加属性并赋值，然后我们页面是动态依赖这个对象或者数组的属性。1234567891011121314151617181920212223242526&lt;li v-for=\"item,index in items\" v-on:click=\"handle(index)\"&gt; &lt;span&gt;&#123;&#123;item.name&#125;&#125; is :&lt;/span&gt; &lt;span&gt;&#123;&#123;numbers[index]&#125;&#125;&lt;/span&gt; &lt;/li&gt; data()&#123; return &#123; numbers: [], items: [ &#123;name: 'jjj'&#125;, &#123;name: 'kkk'&#125;, &#123;name: 'lll'&#125;, ] &#125; &#125; methods: &#123; handle: function (index) &#123; // WHY: 更新数据，view层未渲染，但通过console这个数组可以发现数据确实更新了 if (typeof(this.numbers[index]) === \"undefined\" ) &#123; this.numbers[index] = 1; &#125; else &#123; this.numbers[index]++; &#125; &#125; &#125; 结果发现：点击之后数字并没有在view层更新 三： 当你利用对象的索引直接设置一个项时12345678910111213141516171819202122232425262728293031&lt;li v-for=\"item,index in items\" v-on:click=\"handle(index)\"&gt; &lt;span&gt;&#123;&#123;item.name&#125;&#125; is :&lt;/span&gt; &lt;span&gt;&#123;&#123;numbers[index]&#125;&#125;&lt;/span&gt; &lt;/li&gt; data()&#123; return &#123; numbers: [ &#123; name: \"k\" &#125;, &#123; name: \"kk\" &#125;, &#123; name: \"kkk\" &#125; ], items: [ &#123;name: 'jjj'&#125;, &#123;name: 'kkk'&#125;, &#123;name: 'lll'&#125;, ] &#125; &#125; methods: &#123; handle: function (index) &#123; this.numbers[_index].name = _index; &#125; &#125; 结果发现：点击item并没有在view层更新index 四： 当你修改数组的长度时1234567var vm = new Vue(&#123; data: &#123; items: ['a', 'b', 'c'] &#125;&#125;)vm.items[1] = 'x' // 不是响应性的vm.items.length = 2 // 不是响应性的 原因要解释上述问题，最好的方法就是了解一下Vue在render数据的时候，是如何实现数据的双向绑定的。 Vue实例的data选项，是一个普通的JavaScript对象。 Vue在render前，将会递归遍历data选项上所有的属性，并使用Object.defineProperty把这些属性全部转化为setter/getter。如果想要获取这个属性的内部值，Vue会内部调用getter进行取值，同理赋值的时候，Vue内部就会调用setter进行设值。 但是Object.defineProperty不支持IE8，所以Vue就不兼容IE8以及更低版本的浏览器了。 那么，到这里就可以解释到Vue是怎么进行数据的双向绑定了。 每个组件实例都有自己对应的watcher实例对象，它会在组件渲染的过程中把属性记录为依赖，当依赖项的setter被调用时（也就是data选项里的属性被修改操作，一般为赋值），会通知watcher重新计算。从而致使它关联的组件进行更新。 补充一点setter和getter的知识： 访问器属性不包含数据值，他们包含一对getter函数和setter函数（这两个函数不是必须的）。在读取访问器属性时，会调用getter函数，这个函数负责返回有效的值；在写入访问器属性是，会调用setter函数并传入新值，这个函数负责决定如何处理数据。 也就是在渲染的过程中，data作为页面的基础数据进行渲染。这个时候是首先是递归调用该对象属性的getter函数进行取值，然后getter函数的每一次调用都会通知watcher，告知属性将被调用（getter）并让watcher将之声明为依赖。如果属性被操作（setter进行设值）并发生变化，setter函数的每一次调用也会通知watcher对象，watcher对象收到通知就会重新渲染组件，以此来完成视图的更新，达到响应式。 那么我们回到问题，为什么我们有时候操作对象属性的时候为什么view视图层不能及时、有效的得到更新。 因为Vue在初始化实例的时候会先递归遍历并关联data选项里面以有的属性，执行了setter/getter转化过程，所以属性必须开始就在对象上，这样才能让Vue转化它。至于后来对视图进行操作才给相应的空数组或对象进行增加属性操作的时候，Vue就不能检测到被操作为对象中属性的添加或者删除。所以也就达不到双向绑定了。 解决方法使用 Vue.set(object, key, value) 方法将响应属性添加到嵌套的对象上。 还可以使用 vm.$set 实例方法，这也是全局 Vue.set 方法的别名。例如文章的例子一修改为： 1Vue.set(vm.someObject, 'b', 2) || this.$set(this.someObject,'b',2) 例子二是为已有对象上添加一些属性，对此这里会分两种情况。 情况一：操作数组，数组对固定的索引设值，使用 Vue.set(object, key, value)12345678910methods: &#123; handle: function (index) &#123; // WHY: 更新数据，view层未渲染，但通过console这个数组可以发现数据确实更新了 if (typeof(this.numbers[index]) === \"undefined\" ) &#123; this.$set(this.numbers, index, 1); &#125; else &#123; this.$set(this.numbers, index, ++this.numbers[index]); &#125; &#125;&#125; 情况二：操作数组，数组不针对固定的索引设值，可以使用push操作12345methods: &#123; handle: function (index) &#123; this.numbers.push(index) &#125;&#125; 操作数组或者操作对象字面量增加属性，使用 Object.assign()创建一个新的数组/对象，让它包含原对象的属性和新的属性：123456methods: &#123; handle: function (index) &#123; // 代替 this.$set(this.numbers, index, 1); this.numbers = Object.assign([], this.numbers, [index]) &#125;&#125; 对于问题四，操作数组的长度。Vue 包含一组观察数组的变异方法，所以它们也将会触发视图更新。这些方法如下：1234567push()pop()shift()unshift()splice()sort()reverse() 以上这些其实官方文档都有写明，只是在看文档的时候并不能在脑海里想象得到一些使用用例，导致就算看过这一块文档介绍但是遇到这一问题还是没能找到原因所在。 关于操作数组的官方文档参考：列表渲染 关于响应式的官方文档参考","categories":[],"tags":[]}]}