<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lgwen.github.io/"/>
  <updated>2018-07-02T08:58:28.396Z</updated>
  <id>https://lgwen.github.io/</id>
  
  <author>
    <name>Tokas</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue中响应式检测数组、对象的属性变化（增加或者删除）</title>
    <link href="https://lgwen.github.io/2018/07/02/hello-world/"/>
    <id>https://lgwen.github.io/2018/07/02/hello-world/</id>
    <published>2018-07-02T06:20:52.980Z</published>
    <updated>2018-07-02T08:58:28.396Z</updated>
    
    <content type="html"><![CDATA[<p>Vue的官方文档说到： <a href="https://cn.vuejs.org/v2/guide/reactivity.html" target="_blank" rel="noopener">Vue 最独特的特性之一，是其非侵入性的响应式系统。</a> 数据模型data仅仅是普通的 JavaScript 对象。而当你修改它们时，视图会进行更新。</p><p>但是有时候发现修改了model层数据模型data的时候，view视图层却不能及时、有效的得到更新。往往这类的问题出现都是因为动态操作了数组或者对象字面量的属性导致。</p><p>这里会有几种情况例子，但是其实都是<code>同一个问题</code>。</p><a id="more"></a><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="一-：-Vue并不能检测已经创建的实例上动态添加新的根级响应式属性"><a href="#一-：-Vue并不能检测已经创建的实例上动态添加新的根级响应式属性" class="headerlink" title="一 ： Vue并不能检测已经创建的实例上动态添加新的根级响应式属性"></a>一 ： <code>Vue并不能检测已经创建的实例上动态添加新的根级响应式属性</code></h3><p>所谓的根级就是data下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  data:&#123;</span><br><span class="line">  a:1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// `vm.a` 是响应的</span><br><span class="line"></span><br><span class="line">vm.b = 2</span><br><span class="line">// `vm.b` 是非响应的</span><br></pre></td></tr></table></figure><div class="tip"><br>   官方的解释是：受现代 JavaScript 的限制 (以及废弃 Object.observe)。由于 Vue 会在初始化实例时对属性执行 getter/setter 转化过程，所以属性必须在 data 对象上存在才能让 Vue 转换它，这样才能让它是响应的<br></div><h3 id="二-：-Vue并不能检测到已对象属性中属性的添加或者删除"><a href="#二-：-Vue并不能检测到已对象属性中属性的添加或者删除" class="headerlink" title="二 ： Vue并不能检测到已对象属性中属性的添加或者删除"></a>二 ： <code>Vue并不能检测到已对象属性中属性的添加或者删除</code></h3><p>在我们处理业务逻辑的时候，给data选项里的一个空数组或者空对象增加属性并赋值，然后我们页面是动态依赖这个对象或者数组的属性。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-for=<span class="string">"item,index in items"</span> v-on:click=<span class="string">"handle(index)"</span>&gt;</span><br><span class="line">     &lt;span&gt;&#123;&#123;item.name&#125;&#125; is :&lt;/span&gt;</span><br><span class="line">     &lt;span&gt;&#123;&#123;numbers[index]&#125;&#125;&lt;/span&gt;</span><br><span class="line"> &lt;/li&gt;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="title">data</span></span>()&#123;</span><br><span class="line">     <span class="built_in">return</span> &#123;</span><br><span class="line">         numbers: [],</span><br><span class="line">         items: [</span><br><span class="line">             &#123;name: <span class="string">'jjj'</span>&#125;,</span><br><span class="line">             &#123;name: <span class="string">'kkk'</span>&#125;,</span><br><span class="line">             &#123;name: <span class="string">'lll'</span>&#125;,</span><br><span class="line">         ]</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> methods: &#123;</span><br><span class="line">     handle: <span class="keyword">function</span> (index) &#123;</span><br><span class="line">         // WHY: 更新数据，view层未渲染，但通过console这个数组可以发现数据确实更新了</span><br><span class="line">         <span class="keyword">if</span> (typeof(this.numbers[index]) === <span class="string">"undefined"</span> ) &#123;</span><br><span class="line">             this.numbers[index] = 1;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             this.numbers[index]++;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>结果发现：点击之后数字并没有在view层更新</p><h3 id="三：-当你利用对象的索引直接设置一个项时"><a href="#三：-当你利用对象的索引直接设置一个项时" class="headerlink" title="三： 当你利用对象的索引直接设置一个项时"></a>三： <code>当你利用对象的索引直接设置一个项时</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-for=<span class="string">"item,index in items"</span> v-on:click=<span class="string">"handle(index)"</span>&gt;</span><br><span class="line">     &lt;span&gt;&#123;&#123;item.name&#125;&#125; is :&lt;/span&gt;</span><br><span class="line">     &lt;span&gt;&#123;&#123;numbers[index]&#125;&#125;&lt;/span&gt;</span><br><span class="line"> &lt;/li&gt;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="title">data</span></span>()&#123;</span><br><span class="line">     <span class="built_in">return</span> &#123;</span><br><span class="line">         numbers: [</span><br><span class="line">             &#123;</span><br><span class="line">             name: <span class="string">"k"</span></span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">             name: <span class="string">"kk"</span></span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">             name: <span class="string">"kkk"</span></span><br><span class="line">             &#125;</span><br><span class="line">         ],</span><br><span class="line">         items: [</span><br><span class="line">             &#123;name: <span class="string">'jjj'</span>&#125;,</span><br><span class="line">             &#123;name: <span class="string">'kkk'</span>&#125;,</span><br><span class="line">             &#123;name: <span class="string">'lll'</span>&#125;,</span><br><span class="line">         ]</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> methods: &#123;</span><br><span class="line">     handle: <span class="keyword">function</span> (index) &#123;</span><br><span class="line">         this.numbers[_index].name = _index;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>结果发现：点击item并没有在view层更新index</p><h3 id="四：-当你修改数组的长度时"><a href="#四：-当你修改数组的长度时" class="headerlink" title="四：  当你修改数组的长度时"></a>四：  <code>当你修改数组的长度时</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    items: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">vm.items[1] = <span class="string">'x'</span> // 不是响应性的</span><br><span class="line">vm.items.length = 2 // 不是响应性的</span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>要解释上述问题，最好的方法就是了解一下Vue在render数据的时候，是如何实现数据的双向绑定的。</p><p>Vue实例的data选项，是一个普通的JavaScript对象。</p><p>Vue在render前，将会递归遍历data选项上所有的属性，并使用<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener">Object.defineProperty</a>把这些属性全部转化为<code>setter/getter</code>。如果想要获取这个属性的内部值，Vue会内部调用getter进行取值，同理赋值的时候，Vue内部就会调用setter进行设值。</p><div class="tip"><br>    但是Object.defineProperty不支持IE8，所以Vue就不兼容IE8以及更低版本的浏览器了。<br></div><p>那么，到这里就可以解释到Vue是怎么进行数据的双向绑定了。</p><p>每个组件实例都有自己对应的watcher实例对象，它会在组件渲染的过程中把属性记录为依赖，当依赖项的setter被调用时（也就是data选项里的属性被修改操作，一般为赋值），会通知watcher重新计算。从而致使它关联的组件进行更新。</p><div class="tip"><br>    补充一点setter和getter的知识：<br>    访问器属性不包含数据值，他们包含一对getter函数和setter函数（这两个函数不是必须的）。在读取访问器属性时，会调用getter函数，这个函数负责返回有效的值；在写入访问器属性是，会调用setter函数并传入新值，这个函数负责决定如何处理数据。<br></div><p>也就是在渲染的过程中，<code>data作为页面的基础数据进行渲染。这个时候是首先是递归调用该对象属性的getter函数进行取值，然后getter函数的每一次调用都会通知watcher，告知属性将被调用（getter）并让watcher将之声明为依赖。如果属性被操作（setter进行设值）并发生变化，setter函数的每一次调用也会通知watcher对象，watcher对象收到通知就会重新渲染组件，以此来完成视图的更新，达到响应式。</code></p><p>那么我们回到问题，为什么我们有时候操作对象属性的时候为什么view视图层不能及时、有效的得到更新。</p><p>因为Vue在初始化实例的时候会先递归遍历并关联data选项里面以有的属性，执行了setter/getter转化过程，所以属性必须开始就在对象上，这样才能让Vue转化它。<br>至于后来对视图进行操作才给相应的空数组或对象进行增加属性操作的时候，Vue就不能检测到被操作为对象中属性的添加或者删除。所以也就达不到双向绑定了。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="使用-Vue-set-object-key-value-方法将响应属性添加到嵌套的对象上。-还可以使用-vm-set-实例方法，这也是全局-Vue-set-方法的别名。"><a href="#使用-Vue-set-object-key-value-方法将响应属性添加到嵌套的对象上。-还可以使用-vm-set-实例方法，这也是全局-Vue-set-方法的别名。" class="headerlink" title="使用 Vue.set(object, key, value) 方法将响应属性添加到嵌套的对象上。 还可以使用 vm.$set 实例方法，这也是全局 Vue.set 方法的别名。"></a><code>使用 Vue.set(object, key, value) 方法将响应属性添加到嵌套的对象上。 还可以使用 vm.$set 实例方法，这也是全局 Vue.set 方法的别名。</code></h3><p>例如文章的例子一修改为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.set(vm.someObject, <span class="string">'b'</span>, 2) || this.<span class="variable">$set</span>(this.someObject,<span class="string">'b'</span>,2)</span><br></pre></td></tr></table></figure><p>例子二是为已有对象上添加一些属性，对此这里会分两种情况。</p><h3 id="情况一：操作数组，数组对固定的索引设值，使用-Vue-set-object-key-value"><a href="#情况一：操作数组，数组对固定的索引设值，使用-Vue-set-object-key-value" class="headerlink" title="情况一：操作数组，数组对固定的索引设值，使用 Vue.set(object, key, value)"></a><code>情况一：操作数组，数组对固定的索引设值，使用 Vue.set(object, key, value)</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    handle: <span class="keyword">function</span> (index) &#123;</span><br><span class="line">        // WHY: 更新数据，view层未渲染，但通过console这个数组可以发现数据确实更新了</span><br><span class="line">       <span class="keyword">if</span> (typeof(this.numbers[index]) === <span class="string">"undefined"</span> ) &#123;</span><br><span class="line">         this.<span class="variable">$set</span>(this.numbers, index, 1);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         this.<span class="variable">$set</span>(this.numbers, index, ++this.numbers[index]);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="情况二：操作数组，数组不针对固定的索引设值，可以使用push操作"><a href="#情况二：操作数组，数组不针对固定的索引设值，可以使用push操作" class="headerlink" title="情况二：操作数组，数组不针对固定的索引设值，可以使用push操作"></a><code>情况二：操作数组，数组不针对固定的索引设值，可以使用push操作</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    handle: <span class="keyword">function</span> (index) &#123;</span><br><span class="line">        this.numbers.push(index)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="操作数组或者操作对象字面量增加属性，使用-Object-assign-创建一个新的数组-对象，让它包含原对象的属性和新的属性："><a href="#操作数组或者操作对象字面量增加属性，使用-Object-assign-创建一个新的数组-对象，让它包含原对象的属性和新的属性：" class="headerlink" title="操作数组或者操作对象字面量增加属性，使用 Object.assign()创建一个新的数组/对象，让它包含原对象的属性和新的属性："></a><code>操作数组或者操作对象字面量增加属性，使用 Object.assign()创建一个新的数组/对象，让它包含原对象的属性和新的属性：</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    handle: <span class="keyword">function</span> (index) &#123;</span><br><span class="line">       // 代替 this.<span class="variable">$set</span>(this.numbers, index, 1);</span><br><span class="line">        this.numbers = Object.assign([], this.numbers, [index])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对于问题四，操作数组的长度。Vue-包含一组观察数组的变异方法，所以它们也将会触发视图更新。这些方法如下："><a href="#对于问题四，操作数组的长度。Vue-包含一组观察数组的变异方法，所以它们也将会触发视图更新。这些方法如下：" class="headerlink" title="对于问题四，操作数组的长度。Vue 包含一组观察数组的变异方法，所以它们也将会触发视图更新。这些方法如下："></a><code>对于问题四，操作数组的长度。Vue 包含一组观察数组的变异方法，所以它们也将会触发视图更新。这些方法如下：</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">push()</span><br><span class="line">pop()</span><br><span class="line"><span class="built_in">shift</span>()</span><br><span class="line">unshift()</span><br><span class="line">splice()</span><br><span class="line">sort()</span><br><span class="line">reverse()</span><br></pre></td></tr></table></figure><p>以上这些其实官方文档都有写明，只是在看文档的时候并不能在脑海里想象得到一些使用用例，导致就算看过这一块文档介绍但是遇到这一问题还是没能找到原因所在。</p><p><a href="https://cn.vuejs.org/v2/guide/list.html#注意事项" target="_blank" rel="noopener">关于操作数组的官方文档参考：列表渲染</a></p><p><a href="https://cn.vuejs.org/v2/guide/reactivity.html" target="_blank" rel="noopener">关于响应式的官方文档参考</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue的官方文档说到： &lt;a href=&quot;https://cn.vuejs.org/v2/guide/reactivity.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vue 最独特的特性之一，是其非侵入性的响应式系统。&lt;/a&gt; 数据模型data仅仅是普通的 JavaScript 对象。而当你修改它们时，视图会进行更新。&lt;/p&gt;
&lt;p&gt;但是有时候发现修改了model层数据模型data的时候，view视图层却不能及时、有效的得到更新。往往这类的问题出现都是因为动态操作了数组或者对象字面量的属性导致。&lt;/p&gt;
&lt;p&gt;这里会有几种情况例子，但是其实都是&lt;code&gt;同一个问题&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
